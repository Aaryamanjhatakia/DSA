Handle edge cases:
If the list is empty, has one node, or k is 0 â†’ return the head as-is.

Find length of the list:
Traverse the list to count nodes and keep a reference to the last node (tail).

Make the list circular:
Connect the tail node back to the head (tail.next = head).

Adjust k:
Set k = k % length (to avoid unnecessary full rotations).
Then set k = length - k (to find the new tail after rotation).

Find new tail:
Move k steps forward from the tail to get the new tail.

Break the circle:
Set the node after the new tail as the new head. Break the circle by setting newTail.next = null.

Return new head.


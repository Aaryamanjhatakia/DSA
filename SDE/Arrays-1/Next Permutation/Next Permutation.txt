# Finding the Break-Point and Generating the Next Permutation

## Definition
The **break-point** is the first index **i** from the back of the given array where **arr[i]** becomes smaller than **arr[i+1]**.

## Steps to Find the Break-Point
1. Traverse the array **backward**.
2. Identify the **first index (i)** where **arr[i] < arr[i+1]**.
3. If no such index exists (i.e., the array is sorted in descending order), reverse the entire array and return it as the next permutation.

## Steps to Generate the Next Permutation
If a break-point exists:
1. **Find the smallest number** greater than **arr[i]** in the right half of index **i** (from index **i+1 to n-1**).
2. **Swap** this number with **arr[i]**.
3. **Reverse** the entire right half of index **i** (i.e., from **i+1 to n-1**).
4. Return the modified array as the next permutation.

## Example
**Input:** `{2, 1, 5, 4, 3, 0, 0}`

**Process:**
- The break-point is found at index **1** (value **1**, since **1 < 5**).
- Find the smallest number **greater than 1** in the right half (**{5, 4, 3, 0, 0}**) → **3**.
- Swap **1** and **3** → `{2, 3, 5, 4, 1, 0, 0}`.
- Reverse the right half **{5, 4, 1, 0, 0}** → `{2, 3, 0, 0, 1, 4, 5}`.

**Output:** `{2, 3, 0, 0, 1, 4, 5}`

## Edge Case
If the input array is sorted in descending order, e.g., `{5, 4, 3, 2, 1}`, reversing it gives `{1, 2, 3, 4, 5}`, which is the next permutation.


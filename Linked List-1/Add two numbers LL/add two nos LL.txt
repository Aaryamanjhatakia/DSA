Problem Statement: Given the heads of two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

Input Format: 
(Pointer/Access to the head of the two linked lists)

num1  = 243, num2 = 564

l1 = [2,4,3]
l2 = [5,6,4]

Result: sum = 807; L = [7,0,8]

Explanation: Since the digits are stored in reverse order, add them as â†’ 342 + 465 = 807.

Intuition: Keep track of the carry using a variable and simulate digits-by-digits sum starting from the head of the list, which contains the least significant digit.

Psuedocode:

Create a dummy node which is the head of new linked list.
-Create a node temp, initialise it with dummy.
-Initialize carry to 0.
-Loop through lists l1 and l2 until you reach both ends, and until carry is present.
-Set sum=l1.val+ l2.val + carry.
-Update carry=sum/10.
-Create a new node with the digit value of (sum%10) and set it to temp node's next, then advance temp node to next.
-Advance both l1 and l2.
-Return dummy's next node.


Note that we use a dummy head to simplify the code. Without a dummy head, you would have to write extra conditional statements to initialize the head's value.